function BlinkChannel(n,t,i){Emitter.call(this);var e="pureJs"!=i.blinkSdk?require("./addons/BlinkSdk"):require("b-link");this.logon=!1,log.info("Starting to build blink channel for %s with %s",n,JSON.stringify(i));var o=this;this.blink=new e(i),this.blink.on("reconnect",function(n){log.info("Reconnect to blink success and current visitors is %s.",JSON.stringify(n)),o.emit(consts.EVENT_BLINKCHANNEL_CONNECT_RESUME,n)}),log.info("Listening blink reconnect events..."),this.blink.on("kickout",function(n){log.info(n+" has been kickout."),o.emit(consts.EVENT_USER_LOGIN_KICKOUT,n)}),log.info("Listening blink kickout events..."),this.blink.on("lock",function(n){log.warn("TODO: A visitor lock %s",JSON.stringify(n)),n.status=consts.MAPPING.LOCKING.value,o.emit(consts.EVENT_BLINKCHANNEL_VISITOR_LOCK,n)}),log.info("Listening blink lock events..."),this.blink.on("enter",function(n){log.info("A visitor coming %s",JSON.stringify(n)),o.emit(consts.EVENT_BLINKCHANNEL_VISITOR_ENTER,n)}),log.info("Listening visitor enter event..."),this.blink.on("queue",function(n){log.info("A visitor queue %s",JSON.stringify(n)),o.emit(consts.EVENT_BLINKCHANNEL_VISITOR_QUEUE,n)}),log.info("Listening visitor queue event..."),this.blink.on("leave",function(n){log.info("A visitor leaving %s",JSON.stringify(n)),o.emit(consts.EVENT_BLINKCHANNEL_VISITOR_LEAVE,n)}),log.info("Listening visitor leave event..."),this.blink.on("chat",function(n){log.info("A visitor start chatting %s",JSON.stringify(n)),o.emit(consts.EVENT_BLINKCHANNEL_VISITOR_CHAT,n)}),log.info("Listening visitor chatting event..."),this.blink.on("chatover",function(n){log.info("A visitor end chatting %s",JSON.stringify(n)),o.emit(consts.EVENT_BLINKCHANNEL_VISITOR_CHATOVER,n)}),log.info("Listening visitor chat-over event..."),this.blink.on("backtoenter",function(n){log.info("A visitor end chatting back to enter %s",JSON.stringify(n)),o.emit(consts.EVENT_BLINKCHANNEL_VISITOR_BACKTOENTER,n)}),log.info("Listening visitor backtoenter event..."),this.blink.on("message",function(n,t){log.info("Recv a message %s from %s",JSON.stringify(t),n);var i=consts.UTILS_MESSAGESTYLE_BLINK_TO_CLIENT(t);if(0===i.type)o.emit(consts.EVENT_BLINKCHANNEL_MESSAGE_RECV,i);else if(1===i.type)try{var e=JSON.parse(i.content);if("img"===e.type)o.emit(consts.EVENT_BLINKCHANNEL_MESSAGE_IMAGE,e);else log.error("[1]Unsupported message received. %s",JSON.stringify(t)),o.emit(consts.EVENT_BLINKCHANNEL_MESSAGE_PARSETHROUGH,i)}catch(s){log.error("[2]Unsupported message received. %s",JSON.stringify(t)),o.emit(consts.EVENT_BLINKCHANNEL_MESSAGE_PARSETHROUGH,i)}else if(4===i.type)o.emit(consts.EVENT_BLINKCHANNEL_MESSAGE_PARSETHROUGH,i)}),log.info("Listening message recv event..."),this.blink.on("draft",function(n){log.info("A draft message created %s",JSON.stringify(n));var t=consts.UTILS_MESSAGESTYLE_BLINK_TO_CLIENT(n);t.status=2,o.emit(consts.EVENT_BLINKCHANNEL_MESSAGE_SEND_DRAFT,t)}),log.info("Listening draf message event..."),this.blink.on("reject",function(n){log.info("Visitor reject a invite %s, wait notify and do nothing.",JSON.stringify(n))}),log.info("Listening reject event..."),this.blink.on("invite",function(n){log.info("Recv a invite status %s.",JSON.stringify(n)),o.emit(consts.EVENT_BLINKCHANNEL_VISITOR_INVITE,n)}),log.info("Listening invite event..."),log.info("%s try to login to blink.",n);var s=this;if(!netconnectivity.online){s.logon=!1,log.error(n+" login failed because net is not available ");var r=new Exception(consts.MSG.E1005.code,consts.MSG.E1005.message,{});return void setTimeout(function(){s.emit(consts.EVENT_USER_LOGIN_FAILED,r)},0)}this.blink.login(n,t,i.captcha).then(function(n){s.logon=!0,consts.UTILS_LOGIN_USER=n,log.info(JSON.stringify(n)+" has login successfully."),o.emit(consts.EVENT_USER_LOGIN,n),log.warn("TODO: Need clear when logout or kickoff.")},function(t){s.logon=!1,log.error(n+" login failed.",t);var i;if(240==t.code)i=new Exception(consts.MSG.E1001.code,consts.MSG.E1001.message,t);else i=new Exception(t.code||consts.MSG.E1002.code,t.reason||consts.MSG.E1002.message,t);o.emit(consts.EVENT_USER_LOGIN_FAILED,i)})}var Emitter=require("events").EventEmitter,inherits=require("util").inherits,Q=require("q"),Exception=require("./Exception"),consts=require("./utils/const"),netconnectivity=require("./utils/netconnectivity"),log=require("./utils/log")("BlinkChannel");inherits(BlinkChannel,Emitter),BlinkChannel.prototype.getOnsiteVisitors=function(){var n=Q.defer(),t=this;return log.info("Starting to retrieve onsite visitors..."),this.blink.getContactsList().then(function(t){n.resolve(t)},function(i){log.error("Error occurred when try to get onsite visitors.",i),t.emit(consts.EVENT_BLINKCHANNEL_GETONSITEVISITORS_FAILED,new Exception(i.code,i.reason,i)),n.reject(i)}),n.promise},BlinkChannel.prototype.sendImageNotify=function(n,t){return this.sendMessage(n,t,1,!0)},BlinkChannel.prototype.sendMessage=function(n,t,i,e){var o=Q.defer();return log.info("Starting to send message %s to %s",n,JSON.stringify(t)),this.blink.send(n,"undefined"==typeof i?0:i,t,e).then(function(t){log.info("Send message %s to %s successfully.",JSON.stringify(t),n),o.resolve(t)},function(i){log.info("Fail to send message %s to %s because %s.",JSON.stringify(t),n,JSON.stringify(i)),o.reject(new Exception(consts.MSG.E2001.code,consts.MSG.E2001.message,i))}),o.promise},BlinkChannel.prototype.sendInvite=function(n){if(!this.blink.isConnected())return void log.warn("Do not sendInvite because lost connected %s",n);else return void this.blink.invite(n).then(function(t){log.info("Success to send a invite to %s, do nothing and wait notify.",n)},function(t){log.error("TODO: Fail to send a invite to %s",n)})},BlinkChannel.prototype.sendForceChat=function(n){if(!this.blink.isConnected())return void log.warn("Do not sendForceChat because lost connected %s",n);else return void this.blink.invite(n,!0).then(function(t){log.info("Success to send a force chat to %s, do nothing and wait notify.",n)},function(t){log.error("TODO: Fail to send a force chat to %s",n)})},BlinkChannel.prototype.closeChat=function(n){if(!this.blink.isConnected())return void log.warn("Do not closeChat because lost connected %s",n);else return this.blink.bye(n),void log.info("Success to send a close chat to %s, do nothing and wait notify.",n)},BlinkChannel.prototype.changeStatus=function(n){return this.blink.changeStatus(n)},BlinkChannel.prototype.pickup=function(n){return this.blink.pickup(n).then(function(t){log.info("Success to pick up a visitor %s, do nothing and wait notify.",n)})},BlinkChannel.prototype.listening=function(n,t){var i=this;n.forEach(function(n){i.on(n,t)})},BlinkChannel.prototype.getCurrentLoginUser=function(){return this.blink.getUserInfo()};var singletonBlink;module.exports=function(n,t,i){if(!singletonBlink||!singletonBlink.logon||singletonBlink.logon&&n&&n!=consts.UTILS_LOGIN_USER.name){if(!n||!t||!i)throw new Error("Must create BlinkChannel object first.");singletonBlink=new BlinkChannel(n,t,i),log.info("A new blink channel instance has created, and we will keep it only one.")}if(singletonBlink.logon&&n&&n==consts.UTILS_LOGIN_USER.name)setTimeout(function(){singletonBlink.emit(consts.EVENT_USER_LOGIN,consts.UTILS_LOGIN_USER)},0);return singletonBlink};