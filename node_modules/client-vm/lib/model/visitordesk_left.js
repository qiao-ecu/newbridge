function leftLoader(e,t,n,i){var o=t;visitorDesk.on(consts.EVENT_VIEWMODEL_SYNC_INSERT,function(e,t){if(o==e)log.info("insert a element into db %s with %s",e,JSON.stringify(t)),visitorDesk.leftDb.update({id:t.id},t,{upsert:!0})}),visitorDesk.on(consts.EVENT_VIEWMODEL_SYNC_UPDATE,function(e,t,n){if(o==e){log.info("update a element into db %s with %s",e,JSON.stringify(t)),visitorDesk.leftDb.update({id:t.id},t,{upsert:!0});var i={name:visitorDesk.name,subViewName:e,dynamicViewName:e,mode:"external",type:"update",value:[visitorDesk.getVisitor(t.id)]};visitorDesk.emit("data",i)}}),visitorDesk.on("data-pre",function(e){if(e.name==visitorDesk.name&&e.subViewName==consts.MAPPING.CHATTING.type&&("update"==e.type||"insert"==e.type))e.value.forEach(function(e){if(visitorDesk.get(e.id,t))ViewModelClass.save(visitorDesk,n,e,!0)})}),visitorDesk.on(consts.EVENT_VIEWMODEL_SYNC_DELETE,function(e,t){if(o==e){log.info("Remove a element from db %s with %s",e,JSON.stringify(t)),visitorDesk.leftDb.remove({id:t.id});var n={name:visitorDesk.name,subViewName:e,dynamicViewName:e,mode:"external",type:"delete",value:[visitorDesk.getVisitor(t.id)]};visitorDesk.emit("data",n)}}),log.info("Start listening on insert/delete event on left")}var Emitter=require("events").EventEmitter,inherits=require("util").inherits,Q=require("q"),DB=require("nedb"),path=require("path"),FastMap=require("collections/fast-map"),ViewModelClass=require("../ViewModel"),dataFactory=require("../DataChannel"),blinkFactory=require("../BlinkChannel"),consts=require("../utils/const"),extend=require("../utils/extend"),log=require("../utils/log")("visitinfo"),visitorDesk=require("./visitordesk")();visitorDesk.left_loader=function(e,t,n,i,o){log.info("Start loading left data from db."),this.leftDb.find({},function(n,i){if(n)log.error("Error occurred when try to load leftDb",n);else i.forEach(function(t){ViewModelClass.save(visitorDesk,e,t,!1,!0)}),visitorDesk.emit("data",{name:visitorDesk.name,subViewName:t.subViewName,dynamicViewName:t.name,type:"insert",mode:"internal",value:i});o.resolve(i||[])})},module.exports=function(e){log.info("Starting to create sub-view and dynamic-view on %s.",visitorDesk.name);var t=consts.UTILS_DATA_DIR();return visitorDesk.leftDb=new DB({filename:path.join(t,"/visitordesk-left.db"),autoload:!0}),visitorDesk._subViewCreator(visitorDesk,"left",leftLoader),blinkFactory().on(consts.EVENT_BLINKCHANNEL_CONNECT_RESUME,function(e){log.info("check should be when connect resume and retrun visitors "+JSON.stringify(e));var t=new FastMap;e.forEach(function(e){t.set(e.id,e)}),visitorDesk.all(consts.MAPPING.VISITING.type).forEach(function(e){if(!t.has(e[0]))log.info("Emit a event for left. %s",JSON.stringify(e[1])),blinkFactory().emit(consts.EVENT_BLINKCHANNEL_VISITOR_LEAVE,{id:e[0],status:consts.MAPPING.LEFT.value})})}),log.info("Start to listening resume event for left."),visitorDesk.on(consts.EVENT_ACTION_PREFIX+"block",function(e){setTimeout(function(){blinkFactory().emit(consts.EVENT_BLINKCHANNEL_VISITOR_LEAVE,{id:e.id||e.options.bid,status:consts.MAPPING.LEFT.value})},0)}),null};