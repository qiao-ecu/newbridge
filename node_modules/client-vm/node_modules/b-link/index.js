/**
 * @file B-link client for Node
 * @author cxl(chenxinle@baidu.com)
 */

var curry = require('./lib/util/curry');
var extend = require('./lib/util/extend');
var Socket = require('net').Socket;
var inherits = require('util').inherits;
var EventEmitter = require('events').EventEmitter;
var defaultConfig = require('./config');
var Message = require('./lib/Message');
var encodeMsgType = require('./lib/util/encodeMsgType');
var Logger = require('./lib/Logger');

var CONST = require('./lib/const');

var EVENT_MSG = '_message';

/**
 * 默认的消息处理器
 *
 * @type {Array.<Object>}
 */
var defaultProcessors = (function () {
    var res = [];
    var path = require('path');
    var fs = require('fs');
    var dir = path.resolve(__dirname, 'lib/processor');

    var files = fs.readdirSync(dir);

    files.forEach(function (file) {
        if (path.extname(file) === '.js') {
            res.push(require(path.resolve(dir, file)));
        }
    });

    return res;
})();

/**
 * 沟通内核
 *
 * @class
 * @param {Object} config 配置信息
 * @param {string} config.server 服务器地址
 * @param {number} config.port 端口号
 * @param {string} config.id 用户id
 * @param {number} config.eid 企业id
 * @param {boolean=} config.debug 开启debug模式
 * @param {Array.<Object>} config.processors 消息处理器
 */
function Core(config) {
    EventEmitter.call(this);

    config = this._config = extend({}, defaultConfig, config);
    this.logger = new Logger(config.logDir, config.debug);
    // Listen reconnect event
    this.on('_reconnect', this._reconnect);

    // 定义_status属性
    var status = CONST.STATUS.OFFLINE;
    Object.defineProperty(
        this,
        '_status',
        {
            get: function () {
                return status;
            },
            set: function (newStatus) {
                var oldStatus = status;
                if (oldStatus !== newStatus) {
                    status = newStatus;
                    this.emit('statuschange', newStatus, oldStatus);
                }
            }
        }
    );
}

inherits(Core, EventEmitter);

// 导出常量定义
Core.CONST = CONST;

// Private methods;

/**
 * 发送信息
 *
 * @private
 * @param {number} type 消息类型
 * @param {number} cmd 命令类型
 * @param {Object=} data 消息体
 * @return {Object} 消息对象
 */
Core.prototype._send = function (type, cmd, data) {
    var config = this._config;
    var msg = new Message(config.id, type, cmd);
    msg.body = data;

    this.logger.info(
        'send message %s [%s:%s]',
        msg.id,
        msg.type,
        msg.cmd,
        {data: msg.body}
    );
    if (this.isConnected()) {
        this._socket.write(msg.toBuffer());
    } else {
        msg._send = false;
    }

    return msg;
};

/**
 * 添加消息监听
 *
 * @private
 * @param {number} type 消息类型
 * @param {number} cmd 命令类型
 * @param {Function} fn 消息处理对象
 * @param {boolean=} once 是否只监听一次
 */
Core.prototype._attachMsg = function (type, cmd, fn, once) {
    type = encodeMsgType(type, cmd);
    var method = once ? 'once' : 'on';
    this[method](EVENT_MSG + ':' + type, fn);
};

/**
 * 取消消息监听
 *
 * @private
 * @param {number} type 消息类型
 * @param {number} cmd 命令类型
 * @param {Function} fn 消息处理对象
 */
Core.prototype._detachMsg = function (type, cmd, fn) {
    type = encodeMsgType(type, cmd);
    this.removeListener(EVENT_MSG + ':' + type, fn);
};

/**
 * 事件处理函数
 *
 * @private
 * @param {Object} msg 消息对象
 */
Core.prototype._msgHandler = function (msg) {
    this.logger.info(
        'receive message %s [%s:%s]',
        msg.id,
        msg.type,
        msg.cmd,
        {data: msg.body}
    );

    this.emit(EVENT_MSG, msg);
    this.emit(EVENT_MSG + ':' + msg.mtype, msg);
};

/**
 * 绑定消息处理器
 *
 * @private
 */
Core.prototype._bindProcessors = function () {
    var core = this;

    function attach(type, cmd, fn) {
        core._detachMsg(type, cmd, fn);
        core._attachMsg(type, cmd, fn);
    }

    defaultProcessors.forEach(function (item) {
        var type = item.type;
        var handlers = item.handlers;
        Object.keys(handlers).forEach(function (cmd) {
            attach(type, cmd, handlers[cmd]);
        });
    });

    var processors = core._config.processors || [];
    processors.forEach(function (item) {
        attach(item.type, item.cmd, item.handler);
    });
};

var getUserInfo = require('./lib/util/getUserInfo');

/**
 * 获取当前登陆用户的信息
 *
 * @return {Object}
 */
Core.prototype._getUserInfo = function () {
    return getUserInfo(this._config);
};

/**
 * 添加联系人信息
 * 使用单向链表方式保存联系人信息
 * 期望在数量与操作性能上能有所提升
 *
 * @param {Object} info 联系人信息
 * @param {string} info.id 联系人id
 * @param {string} info.type 联系人类型
 * @param {string} info.authType 联系人验证方式
 */
Core.prototype._addContacts = function (info) {
    var node = {
        id: info.id,
        data: extend({}, info)
    };

    if (this._lContacts) {
        this._lContacts.next = node;
    }
    this._lContacts = node;

    if (!this._fContacts) {
        this._fContacts = node;
    }
};

/**
 * 搜索联系人节点
 *
 * @param {string} id 联系人id
 * @return {Object}
 */
Core.prototype._searchContacts = function (id) {
    var b;
    var p = this._fContacts;

    while (p && p.id !== id) {
        b = p;
        p = p.next;
    }

    return {
        prev: b,
        node: p
    };
};

/**
 * 删除联系人
 *
 * @param {string} id 联系人id
 * @return {boolean}
 */
Core.prototype._removeContacts = function (id) {
    var res = this._searchContacts(id);

    if (res.node) {
        if (res.prev) {
            res.prev.next = res.node.next;
            this._lContacts = res.prev.next || res.prev;
        }
        else {
            this._lContacts = this._fContacts = null;
        }
        return true;
    }

    return false;
};

/**
 * 获取联系人信息
 *
 * @param {string} id 联系人id
 * @return {?Object}
 */
Core.prototype._getContacts = function (id) {
    var p = this._searchContacts(id).node;
    return p && extend({}, p.data);
};

/**
 * 更新联系人信息
 *
 * @param {string} id 联系人id
 * @param {Object} data 更新信息
 * @return {Object}
 */
Core.prototype._updateContacts = function (id, data) {
    var res;
    var p = this._searchContacts(id).node;

    if (p) {
        p.data = extend(p.data, data);
        // 防止id被修改
        p.data.id = id;
        res = extend({}, p.data);
    }

    return res;
};

// Public methods:

var login = require('./lib/biz/login');
var connect = require('./lib/biz/connect');

/**
 * 用户登陆
 *
 * @public
 * @param {string} username 用户名
 * @param {string} pwd 密码
 * @param {string} captcha 验证码
 * @return {Promise}
 */
Core.prototype.login = function (username, pwd, captcha) {
    return connect(this)
        .then(this._bindProcessors.bind(this))
        .then(curry(login, this, username, pwd, captcha));
};

/**
 *
 * @public
 * @return {boolean} Socket status
 */
Core.prototype.isConnected = function() {
    
    return !this._reconnecting;
};

/**
 * Reconnect after net-error.
 *
 * @private
 * @return {Promise}
 */
Core.prototype._reconnect = function () {
    var _this = this;
    return curry(login, this, this._username, this._password)()
        .then(this.getContactsList.bind(this))
        .then(function(visitors) {
            _this.emit('reconnect', visitors);
        });
};

var logout = require('./lib/biz/logout');
var disconnect = require('./lib/biz/disconnect');

/**
 * 用户登出
 *
 * @public
 * @return {Promise}
 */
Core.prototype.logout = function () {
    return logout(this).then(curry(disconnect, this));
};

var getContactsList = require('./lib/biz/getContactsList');
var getContactsStatus = require('./lib/biz/getContactsStatus');

/**
 * 获取用户列表
 *
 * @public
 * @return {Promise}
 */
Core.prototype.getContactsList = function () {
    return getContactsList(this)
            .then(function (list) {
                return list.map(function (item) {
                    return item.id;
                });
            })
            .then(curry(getContactsStatus, this));
};

var sendMessage = require('./lib/biz/sendMessage');

/**
 * 发送消息
 *
 * @public
 * @param {string} id 发送的对象id
 * @param {string} type 消息类型
 * @param {*} content 消息内容
 * @param {boolean} forget 是否需要发出通知
 * @return {Promise}
 */
Core.prototype.send = function (id, type, content, forget) {
    return sendMessage(
        this,
        {
            to: id,
            type: type,
            content: content,
            forget: forget
        }
    );
};

var invite = require('./lib/biz/invite');

/**
 * Send invite to contact
 * 
 * @public
 * @param {string} id identify of visitor
 * @param {Boolean} forceChat chat model or invite model
 * @return {Promise}
 */
Core.prototype.invite = function(id, forceChat) {
    return invite(this, id, forceChat);
};

var changeStatus = require('./lib/biz/changeStatus');

/**
 * Change status
 * 
 * @public
 * @param {Number} status change to
 * @return {Promise}
 */
Core.prototype.changeStatus = function(status) {
    return changeStatus(this, status);
};

var pickup = require('./lib/biz/pickup');
/**
 * Pick contact in queue
 * 
 * @public
 * @param {String} contactId to be pickup
 * @return {Promise}
 */
Core.prototype.pickup = function(contactId) {
    return pickup(this, contactId);
};

var bye = require('./lib/biz/bye');

/**
 * Customer service bye a chatting.
 * 
 * @public
 * @param {string} identify of visitor
 * @return {Promise}
 */
Core.prototype.bye = function(id) {
    
    var contact = this._getContacts(id);
    var sessionid = contact.sessionId;
    var _this = this;
    return bye(this, id).then(
        function(res) {
            _this.emit('chatover', {
                id: id,
                sessionId: sessionid
            });
        }, 
        function(err) {
            _this.logger.error('TODO:Error occurred when try to bye a session %s %s', sessionid, id);
        }
    );
};

/**
 * 获取登录者信息
 *
 * @public
 * @return {Object}
 */
Core.prototype.getUserInfo = function () {
    var config = this._config;
    var keys = ['id', 'eid', 'nickname', 'token', 'status'];
    var res = {};

    keys.forEach(function (key) {
        res[key] = config[key];
    });

    return res;
};

// export
module.exports = Core;
