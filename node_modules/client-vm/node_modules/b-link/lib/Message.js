/**
 * @file 消息对象
 * @author cxl(chenxinle@baidu.com)
 */

var headerEncode = require('./codec/header').encode;
var bodyEncode = require('./codec/body').encode;
var encodeMsgType = require('./util/encodeMsgType');
var decodeMsgType = require('./util/decodeMsgType');

/**
 * 消息对象
 *
 * @class
 * @param {string} uid 用户id
 * @param {number} type 消息类型
 * @param {number} cmd 命令类型
 */
function Message(uid, type, cmd) {
    this.id = Date.now();
    this.uid = uid + '';
    this.type = type;
    this.cmd = cmd;
    this.mtype = encodeMsgType(type, cmd);
    this.body = {};
}

Message.prototype.setHeader = function (header) {
    var me = this;
    ['id', 'uid', 'len', 'mtype'].forEach(function (key) {
        me[key] = header[key];
    });

    var m = decodeMsgType(header.mtype);
    this.type = m.type;
    this.cmd = m.cmd;
};

Message.prototype.setBody = function (body) {
    this.body = body;
};

/**
 * 设置消息体内容
 *
 * @public
 * @param {string} name name
 * @param {*} value value
 */
Message.prototype.set = function (name, value) {
    this.body[name] = value;
};

/**
 * 获取消息体内容
 *
 * @public
 * @param {string} name name
 * @return {*}
 */
Message.prototype.get = function (name) {
    return this.body[name];
};

/**
 * 将消息转化成Buffer
 *
 * @public
 * @return {Object}
 */
Message.prototype.toBuffer = function () {
    var body = this.body || {};
    if (Object.keys(body).length) {
        body = bodyEncode(this.mtype, body);
    }
    else {
        body = new Buffer(0);
    }
    var header = headerEncode(this.id, this.uid, this.mtype, body.length);

    return Buffer.concat([header, body]);
};

module.exports = Message;
