/**
 * @file 邀请相关
 * @author mengran(mengran@baidu.com)
 */

var CONST = require('../const');
var getUserInfo = require('../util/getUserInfo');
var AckError = require('./AckError');
var Long = require('long');
var curry = require('../util/curry');

/**
 * Invite response
 *
 * @param {Object} res Response object
 */
function inviteResponseHandler(core, resolve, id, res) {
    var contacts = {
        id: id,
        status: CONST.V_STATUS.ALERTING
    };

    if (this._searchContacts(contacts.id).node) {
        contacts = this._updateContacts(contacts.id, 
            {status: contacts.status});
    }
    
    this.emit('invite', contacts);
    resolve(res);
}

/**
 * Invite error
 *
 * @param {Object} err Response object
 */
function inviteErrorHandler(reject, err) {
    
    reject(err);
}

/**
 * Invite reject
 * 
 * @param {Object} core Core object
 * @param {Object} res Response object
 */
function inviteRejectHandler(core, data, res) {
    
    core.emit('reject', data);
}

/**
 * Send invite request
 *
 * @public
 * @param {Object} core 沟通内核
 * @param {string} id identify of visitor
 * @param {Boolean} forceChat chat model or invite model
 * @return {Promise}
 */
module.exports = function (core, id, forceChat) {
    var config = core._config;
    var contacts = core._getContacts(id);

    if (!contacts) {
        var error = new AckError('invite', {result: id});
        return Promise.reject(error);
    }

    var currentUser = core._getUserInfo();
    var data = {
        from: currentUser,
        fromtype: config.role,
        to: getUserInfo(contacts),
        totype: contacts.type,
        siteid: contacts.siteId,
        sessionid: contacts.sessionId,
        eid: config.eid,
        content: [],
        reason: forceChat ? 'chat' : 'invite',
        sinfo: JSON.stringify(currentUser)
    };

    return new Promise(function (resolve, reject) {
        core._attachMsg(
            CONST.MSG.RESPONSE,
            CONST.CMD.INVITE,
            curry(inviteResponseHandler, core, resolve, contacts.id),
            true    // Once
        );
        core._attachMsg(
            CONST.MSG.ERROR,
            CONST.CMD.INVITE,
            curry(inviteErrorHandler, reject),
            true    // Once
        );
        core._attachMsg(
            CONST.MSG.FORWARD,
            CONST.CMD.REJECT,
            curry(inviteRejectHandler, core, {
                id: contacts.id,
                sessionid: contacts.sessionId,
            }),
            true    // Once
        );
        core._send(CONST.MSG.REQUEST, CONST.CMD.INVITE, data);
    });
};
