/**
 * @file 发送消息
 * @author cxl(chenxinle@baidu.com)
 */

var CONST = require('../const');
var getUserInfo = require('../util/getUserInfo');
var AckError = require('./AckError');
var Long = require('long');

/**
 * 消息应答超时时间
 *
 * @const
 * @type {*}
 */
var MSG_TIMEOUT = 10 * 1000;

/**
 * 等待应答的消息队列
 *
 * @type {Object}
 */
var waitingList = {};

/**
 * 检查消息
 * 确保 client 已经收到
 *
 * @param {string} id 消息id
 * @param {Function} success 消息发送成功回调
 * @param {Function} fail 消息发送超时回调
 */
function check(id, success, fail) {
    var item = waitingList[id] = {
        success: success,
        fail: fail
    };

    item.timer = setTimeout(
        function () {
            var item = waitingList[id];
            if (item) {
                delete waitingList[id];
                item.fail(id);
            }
        },
        MSG_TIMEOUT
    );
}

/**
 * 消息响应事件处理
 *
 * @param {Object} msg 消息对象
 */
function msgHandler(msg) {
    var id = msg.id;
    var item = waitingList[id];

    if (item) {
        clearTimeout(item.timer);
        delete waitingList[id];
        item.success(msg);
    }
}

// 事件处理绑定标示
msgHandler.attached = false;

/**
 * 发送消息
 *
 * @public
 * @param {Object} core 沟通内核
 * @param {Object} msg 消息对象
 * @param {string} msg.to 消息发送对象id
 * @param {string} msg.type 消息类型
 * @param {string} msg.content 消息内容
 * @return {Promise}
 */
module.exports = function (core, msg) {
    var config = core._config;
    var contacts = core._getContacts(msg.to);

    // 只绑定一次
    if (!msgHandler.attached) {
        core._attachMsg(
            CONST.MSG.RESPONSE,
            CONST.CMD.CONTENT,
            msgHandler
        );

        msgHandler.attached = true;
    }

    if (!contacts) {
        var error = new AckError('sendmessage', {result: CONST.ERROR_SEND_MSG.UNKNOW});
        return Promise.reject(error);
    }

    var currentUser = core.getUserInfo();
    var data = {
        from: core._getUserInfo(),
        fromtype: config.role,
        to: getUserInfo(contacts),
        totype: contacts.type,
        siteid: contacts.siteId,
        sessionid: contacts.sessionId,
        eid: config.eid,
        content: [],
        adata: JSON.stringify(currentUser)
    };

    data.content.push({
        type: msg.type,
        content: msg.content,
        // Add timestamp by MENGRAN.
        timestamp: Long.fromNumber(Date.now()),
    });

    var forget = msg.forget;
    msg = core._send(CONST.MSG.REQUEST, CONST.CMD.CONTENT, data);
    if (msg._send === false) {
        var notSendErr = new AckError(msg.id, {result: CONST.ERROR_SEND_MSG.DISCARD});
        return Promise.reject(notSendErr);
    }
    if (!forget) {
        core.emit('draft', msg);
    }

    return new Promise(function (resolve, reject) {
        var id = msg.id;

        function fail() {
            var error = new AckError(id, {result: CONST.ERROR_SEND_MSG.TIMEOUT});
            reject(error);
        }

        check(id, resolve, fail);
    });
};
