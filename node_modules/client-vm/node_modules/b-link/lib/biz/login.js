/**
 * @file 用户登陆
 * @author cxl(chenxinle@baidu.com)
 * @author mengran(mengran@baidu.com)
 */

var curry = require('../util/curry');
var CONST = require('../const');
var AckError = require('./AckError');

/**
 * 心跳包发送频率
 * 默认1分钟一次
 *
 * @const
 * @type {number}
 */
var HEART_BEAT_TIME = 60 * 1000;

/**
 * 持续发送心跳包
 *
 * @param {Object} core 沟通内核
 */
function heartBeat(core) {
    if (core._heartBeatTimer
        || core._status >= CONST.STATUS.OFFLINE
    ) {
        return;
    }
    
    // 准备心跳数据包
    var data = {
        user: core._getUserInfo(),
        eid: core._config.eid,
        device: CONST.DEVICE.PC,
        token: core._config.token
    };

    core._send(CONST.MSG.REQUEST, CONST.CMD.AGT_HEARTBEAT, data);

    // 定时发送
    core._heartBeatTimer = setTimeout(
        function () {
            core._heartBeatTimer = null;
            heartBeat(core);
        },
        HEART_BEAT_TIME
    );
}

/**
 * 登陆响应处理
 *
 * @param {Function} resolve resolve
 * @param {Function} reject reject
 * @param {Object} msg 消息对象
 */
function loginHandler(resolve, reject, msg) {
    var data = msg.body;

    if (data.result !== CONST.RESULT.SUCCESS) {
        this.logger.error('login error %s', JSON.stringify(data));
        if (data.authfailinfo) {
            var authfailinfo = JSON.parse(data.authfailinfo);
            data.result = authfailinfo.errorCode;
            data.reason = authfailinfo.errorMsg;
        }
        reject(new AckError('login', data));
        return;
    }

    var config = this._config;
    var res = {
        id: data.user.id,
        eid: data.eid,
        nickname: data.nickname,
        token: data.token,
        status: config.status
    };

    // 更新id与eid
    config.id = res.id;
    config.eid = res.eid;

    config.token = res.token;
    config.nickname = res.nickname;

    // 更新状态
    this._status = config.status;
    // 开启心跳
    heartBeat(this);

    resolve(res);
}

/**
 * 客户登陆
 *
 * @public
 * @param {Object} core 沟通内核
 * @param {string} username 用户名
 * @param {string} pwd 密码
 * @param {string} captcha 验证码(Optional)
 * @return {Promise}
 */
module.exports = function (core, username, pwd, captcha) {
    var config = core._config;
    var data = {
        user: core._getUserInfo(),
        eid: config.eid,
        device: CONST.DEVICE.PC,
        role: config.role,
        username: username,
        passwd: pwd,
        servicetype: 3,
        vcode: captcha,      // Add captch
        status: config.status || CONST.STATUS.ONLINE,
        mac: config.macAddress || 'i am mac'
    };
    core._username = username;
    core._password = pwd;
    
    var promise = new Promise(function (resolve, reject) {
        core._send(CONST.MSG.REQUEST, CONST.CMD.AGT_LOGIN, data);
        core._attachMsg(
            CONST.MSG.RESPONSE,
            CONST.CMD.AGT_LOGIN,
            curry(loginHandler, resolve, reject),
            true
        );
    });

    return promise;
};
