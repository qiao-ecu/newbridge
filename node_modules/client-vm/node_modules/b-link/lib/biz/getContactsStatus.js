/**
 * @file 批量获取联系人状态
 * @author cxl(chenxinle@baidu.com)
 */

var curry = require('../util/curry');
var getUserInfo = require('../util/getUserInfo');
var AckError = require('./AckError');

var CONST = require('../const');

/**
 * 请求响应处理
 *
 * @param {Function} resolve resolve
 * @param {Function} reject reject
 * @param {Object} msg 消息对象
 */
function handler(resolve, reject, msg) {
    var core = this;
    var data = msg.body;

    if (data.result !== CONST.RESULT.SUCCESS) {
        reject(new AckError('getcontactsstatus', data));
        return;
    }

    var visitors = [];
    data.visitors.forEach(function (item) {
        var contacts = {
            id: item.user.id,
            authType: item.user.authtype,
            status: item.stat,
            sessionId: item.sessionid,       // Add sessionid
            // time: Date.now()
        };
        // Add lock logic.
        var peers = item.info ? (JSON.parse(item.info).peers || []) : [];
        var user = core.getUserInfo();
        var locking = true;
        peers.forEach(function(v) {
            if (v.id == user.id) {
                locking = false;
            }
        });
        if (peers.length > 0 && locking) {
            contacts.status = CONST.V_STATUS.LOCKING
        }
        contacts = core._updateContacts(contacts.id, contacts);
        if (contacts) {
            visitors.push(contacts);
        }
    });

    resolve(visitors);
}

/**
 * 批量获取联系人状态
 * 暂时只支持获取访客的状态
 *
 * @param {Object} core 沟通内核
 * @param {string|Array.<string>} list 访客id数组
 * @return {Promise}
 */
module.exports = function (core, list) {
    var config = core._config;
    var visitors = [];

    if (!Array.isArray(list)) {
        list = [list];
    }

    list.forEach(function (id) {
        var contacts = core._getContacts(id);
        if (!contacts) {
            return;
        }

        visitors.push({
            user: getUserInfo(contacts),
            eid: contacts.eid,
            device: contacts.device,
            siteid: contacts.siteId
        });
    });

    var data = {
        user: core._getUserInfo(),
        eid: config.eid,
        visitors: visitors,
        csrs: []
    };

    core._send(CONST.MSG.REQUEST, CONST.CMD.AGT_GET_COMSTAT, data);

    return new Promise(function (resolve, reject) {
        core._attachMsg(
            CONST.MSG.RESPONSE,
            CONST.CMD.AGT_GET_COMSTAT,
            curry(handler, resolve, reject),
            true
        );
    });
};
