/**
 * @file 消息头处理
 * @author cxl(chenxinle@baidu.com)
 */

/**
 * 消息头部大小
 *
 * @const
 * @type {number}
 */
var HEADER_SIZE = require('../const').HEADER_SIZE;

/**
 * 文本编码方式
 *
 * @const
 * @type {string}
 */
var ENCODING = 'utf8';

/**
 * 消息头编码
 *
 * @class
 * @param {number} id 消息id
 * @param {string} uid 用户id
 * @param {number} mtype 消息类型
 * @param {number} len 消息体长度
 * @return {Object}
 */
exports.encode = function (id, uid, mtype, len) {
    var buf = new Buffer(HEADER_SIZE);
    // 写入magic 'BlkP'
    buf.write('BlkP', 0, 4, ENCODING);
    // 协议主版本号
    buf.writeUInt8(1, 4);
    // 协议次版本号
    buf.writeUInt8(0, 5);
    // 压缩状态
    buf.writeUInt8(0, 6);
    // 设备类型
    buf.writeUInt8(2, 7);
    // 客户端操作系统主版本
    buf.writeUInt8(10, 8);
    // 客户端操作系统次版本
    buf.writeUInt8(10, 9);
    // 消息类型
    buf.writeUInt16BE(mtype, 10);
    // body长度
    buf.writeUInt32BE(len, 12);
    // 消息体id
    buf.writeDoubleBE(id, 16);
    // 用户id
    buf.write(uid, 24, 8, ENCODING);
    // 保留字段，暂不使用
    buf.writeDoubleBE(0, 32);

    return buf;
};

/**
 * 消息头解码
 *
 * @public
 * @param {Object} buffer 原始消息头
 * @return {Object}
 */
exports.decode = function (buffer) {
    return {
        id: buffer.readDoubleBE(16),
        uid: buffer.toString(ENCODING, 24, 24 + 8),
        mtype: buffer.readUInt16BE(10),
        len: buffer.readUInt32BE(12)
    };
};
