/**
 * @file 消息体处理
 * @author cxl(chenxinle@baidu.com)
 * @author mengran(mengran@baidu.com)
 */

var ProtoBuf = require('protobufjs');
var encodeMsgType = require('../util/encodeMsgType');
var decodeMsgType = require('../util/decodeMsgType');
var CONST = require('../const');
var path = require('path');

var assert = require('assert');

var builder = ProtoBuf.loadProtoFile(path.resolve(__dirname, 'proto/login.proto'));
var LoginProto = builder.build('login_protocol');

builder = ProtoBuf.loadProtoFile(path.resolve(__dirname, 'proto/sess_body.proto'));
var Sess = builder.build('sess');

/**
 * 协议规范集合
 *
 * @type {Object}
 */
var protocols = {};

/**
 * 添加协议规范
 *
 * @param {number} type 消息类型
 * @param {number} cmd 命令类型
 * @param {Object} Proto 协议规范
 */
function add(type, cmd, Proto) {
    type = encodeMsgType(type, cmd);
    protocols[type] = Proto;
}

// 客服登陆
add(CONST.MSG.REQUEST, CONST.CMD.AGT_LOGIN, LoginProto.login);
// 客服登陆响应
add(CONST.MSG.RESPONSE, CONST.CMD.AGT_LOGIN, LoginProto.login_ack);

// 获取沟通列表
add(CONST.MSG.REQUEST, CONST.CMD.AGT_GET_COMLIST, LoginProto.agt_getcomlist);
// 沟通列表响应
add(CONST.MSG.RESPONSE, CONST.CMD.AGT_GET_COMLIST, LoginProto.agt_getcomlist_ack);

// 获取沟通状态
add(CONST.MSG.REQUEST, CONST.CMD.AGT_GET_COMSTAT, LoginProto.agt_getcomstat);
// 沟通状态响应
add(CONST.MSG.RESPONSE, CONST.CMD.AGT_GET_COMSTAT, LoginProto.agt_getcomstat_ack);

// 发送消息
add(CONST.MSG.REQUEST, CONST.CMD.CONTENT, Sess.MsgBody);
// 消息已确认接收响应
add(CONST.MSG.RESPONSE, CONST.CMD.CONTENT, Sess.MsgBody);
// 收到消息
add(CONST.MSG.FORWARD, CONST.CMD.CONTENT, Sess.MsgBody);

// 访客登陆
add(CONST.MSG.FORWARD, CONST.CMD.VST_ENTER, LoginProto.vst_pack);
// 访客离开
add(CONST.MSG.FORWARD, CONST.CMD.VST_LEAVE, LoginProto.vst_pack);

// 访客状态改变通知
add(CONST.MSG.NOTIFY, CONST.CMD.NTF_VSTAT, LoginProto.notify_vst_stat);
// Add by MENGRAN at 2015-12-29
add(CONST.MSG.NOTIFY, CONST.CMD.NTF_CSTAT, LoginProto.notify_agt_stat);

// 访客主动邀请框沟通
add(CONST.MSG.FORWARD, CONST.CMD.INVITE, Sess.MsgBody);
// 客服邀请
add(CONST.MSG.REQUEST, CONST.CMD.INVITE, Sess.MsgBody);
add(CONST.MSG.ERROR, CONST.CMD.INVITE, Sess.MsgBody);
add(CONST.MSG.FORWARD, CONST.CMD.ACCEPT, Sess.MsgBody);

// 访客主动结束
add(CONST.MSG.FORWARD, CONST.CMD.BYE, Sess.MsgBody);
// 客服主动结束
add(CONST.MSG.REQUEST, CONST.CMD.BYE, Sess.MsgBody);

// 业务心跳 add by mengran at 2015-07-10
add(CONST.MSG.REQUEST, CONST.CMD.AGT_HEARTBEAT, LoginProto.agt_heartbeat);

// 客服被踢下线 add by mengran at 2015-10-30
add(CONST.MSG.NOTIFY, CONST.CMD.NTF_KICKOUT, LoginProto.notify_kickout);

// 修改客服状态 add by mengran at 2015-12-10
add(CONST.MSG.REQUEST, CONST.CMD.AGT_CHANGESTATUS, LoginProto.agt_changestat);
add(CONST.MSG.RESPONSE, CONST.CMD.AGT_CHANGESTATUS, LoginProto.agt_changestat_ack);

// 接起排队中访客
add(CONST.MSG.REQUEST, CONST.CMD.ACCEPT, Sess.MsgBody);
add(CONST.MSG.RESPONSE, CONST.CMD.ACCEPT, Sess.MsgBody);

/**
 * 消息体编码
 *
 * @public
 * @param {number} mtype 消息类型
 * @param {Object} body 消息体内容
 * @return {Object}
 */
exports.encode = function (mtype, body) {
    var Proto = protocols[mtype];

    var m = decodeMsgType(mtype);
    assert(Proto, 'encode unknow type: ' + m.type + '|' + m.cmd);

    var data = new Proto(body);
    return data.toBuffer();
};

/**
 * 消息体解码
 *
 * @public
 * @param {number} mtype 消息类型
 * @param {Object} buffer 原始消息体
 * @return {?Object}
 */
exports.decode = function (mtype, buffer) {
    var Proto = protocols[mtype];
    return Proto ? Proto.decode(buffer) : null;
};
