import "cg_types.proto";
import "sess_body.proto";

package sess;

message Session {
    enum Right {
        SEND_RECV   =0;
        RECV        =1;
        SEND        =2;
    }

    message Party {
       required MsgBody.OprType type     =1;
       required cg.User         user     =2; 
       optional Right           right    =3 [default=SEND_RECV];
       optional sfixed32        queuetmo =4 [default=-1];//csr could accept visitor only before it's timeout
    }

    required string     id           =1 [default="-1"];  //session id
    optional sfixed64   createTime   =2 [default=-1];    //create time, in millisecond	
    repeated Party      cParties     =3 ;                //all csr ids
    required cg.User    visitor      =4 ;                //visitor
    required cg.User    creator      =5 ;                //person who create this session
    optional fixed64    lastTalkTime =6 [default=0];     //last alive time
    optional bool       onlyCsrs     =7 [default=false]; //session contains csr only
    optional bool       finished     =8 [default=false]; //is session normal? visitor.st=TALK
    optional sfixed32   maxrecep     =9 [default=-1];    //csr can recep vsts simultaneously
    optional sfixed64   queueTime    =10[default=-1];    //when visitor state change to queueing, in second
	optional MsgBody.OprType  creatorOprType =11;                //csr or vst
    optional fixed32    creatorSiteid        =12;                //siteid
}
