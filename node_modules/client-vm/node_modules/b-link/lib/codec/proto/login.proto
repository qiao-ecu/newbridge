import "cg_types.proto";
import "sess_body.proto";

package login_protocol;

//�ÿͽ���ҳ����Ϣ
message vst_pack {
    required cg.User user = 1;
    required cg.Visitor.Device device    = 2; //��¼�豸
    optional fixed32 ip                  = 3; //�ÿ͵�ip
    required fixed32 siteid              = 4; //�ÿͷ��ʵ�siteid
    required fixed32 eid                 = 5; //�ÿͷ��ʵ�eid
    required string   url                 = 6; //�ÿͷ��ʵ�url

    optional vst_business_info businfo	 = 7; //ҵ��������Ϣ
    optional terminal_info tinfo         = 8; //�ն�������Ϣ
    optional string reserved	             = 9; //json������չ֮��
}

//�ÿ���Ϣͳһ�ذ�
message vst_ack {
    required fixed32 eid    = 1; //�ÿͷ��ʵ�eid
    required fixed32 result = 2; //��������
    optional cg.User user = 3;
}

message vst_pack_login2rmg {
    required vst_pack req    = 1;
    required vst_ack ack     = 2;
    required fixed64 touuid = 3;
}

//֪ͨ�ÿ�״̬�仯
message notify_vst_stat {
    required cg.User user             = 1; //�ÿ�
    required fixed32 eid              = 2; //��ҵid
    required cg.Visitor.Device device = 3; //��¼�豸
    required fixed32 siteid           = 4; //վ��id
    required cg.Visitor.Status status = 5; //�ÿ�״̬
    optional string   sessionid        = 6; //sessionid
    optional string visitor_info       = 7; //json��, ��web���ɣ��ͻ��˽���
    optional fixed64 timestamp        = 8;
}

//�ٶ���������Ϣ
message location {
    optional string bd_uid			= 1; //�ٶ��������û�id
    optional string bd_channel_id	= 2; //�ٶ�������ͨ��id
    optional fixed32 device_type	= 3; //�ٶ��������豸����
}

//�ÿ�ҵ����Ϣ
message vst_business_info {
    optional string bdclkid     = 1;     //�ٶ�clickid, �ӷÿ�������cookie�л�ȡ
    optional string word        = 2;     //������
    optional string wordid      = 3;     //������id
    optional string keyword     = 4;     //�ÿʹ����Ŀͻ������Ĺؼ���id
    optional string fs          = 5;     //�״νӴ��ͷ�id
    optional fixed32 ftime     = 6;     //�״νӴ�ʱ��
    optional string ls          = 7;     //�ϴνӴ��ͷ�id
    optional fixed32 ltime     = 8;     //�ϴνӴ�ʱ��
    optional fixed32 time      = 9;     //�ÿͱ��η��ʵľ���ʱ����
    optional fixed32 lv        = 10;    //��ʷ���ʴ���
    optional fixed32 lvp       = 11;    //��ʷ����ҳ����
    optional fixed32 lc        = 12;    //��ʷ��ͨ����
    optional string referrer    = 13;    //��Դ���ӷÿ�������httpͷ�л�ȡ
    optional string title       = 14;    //��ǰҳ��title
    optional string frequent    = 15;    //�жϷÿ��Ƿ�Ϊ����
    optional fixed32 calltime  = 16;    //�ÿͱ���ʹ����ҳ�غ��ľ���ʱ����
    optional fixed32 fcalltime = 17;    //�ÿ��״�ʹ����ҳ�غ��ľ���ʱ����
    optional fixed32 lcalltime = 18;    //�ÿ��ϴ�ʹ����ҳ�غ��ľ���ʱ����
    optional fixed32 lcallc    = 19;    //�ÿ���ʷʹ����ҳ�غ��������ܺ�
    optional fixed32 fcalls    = 20;    //�ÿ��״�ʹ����ҳ�غ��Ӵ��Ŀͷ�
    optional fixed32 lcalls    = 21;    //�ÿ��ϴ�ʹ����ҳ�غ��Ӵ��Ŀͷ�
    optional string baiduid     = 22;    //�ӷÿ�������cookie�л�ȡ
    optional string hbdclckidsf = 23;    //�ӷÿ�������cookie�л�ȡ
    optional string useragent   = 24;    //�ӷÿ�������httpͷ�л�ȡ
}

message terminal_info {
    optional location loc	 = 1;  //�ٶ���������Ϣ
    optional fixed32 cbit	 = 2;  //��ɫ����
    optional string fsl		 = 3;  //�ֱ���
    optional string coding	 = 4;  //����
    optional string lang		 = 5;  //����
    optional string tz		 = 6;  //ʱ��
    optional fixed32 curtime = 7;  //�ն˵�ǰʱ��������
    optional string os		 = 8;  //����ϵͳ�汾��Ϣ
}

//��¼
message login {
    required cg.User user = 1;
    required fixed32 eid               	= 3;  //��ҵid
    required cg.Csr.Device device      	= 4;  //��¼�豸
    required sess.MsgBody.OprType role 	= 5;  //��¼��ɫ��0-�ͷ���1-�ÿ�
    optional string username             = 6;  //�û���
    optional string passwd               = 7;  //����
    optional string checkinfo            = 8;  //��������֤�����ֶ�

    optional fixed32 servicetype	    = 9;  //��������
    repeated string mac                  = 10; //��¼mac��ַ�б�
    repeated string ip                   = 11; //��¼ip��ַ�б�
    optional string vcode                = 12; //��¼��֤��
    optional cg.Csr.Status status       = 13; //�ͷ���¼��ʼ״̬����
    optional string industry	            = 14; //��ҵ��Ϣ
    optional fixed32 retry              = 15; //�Ƿ�������
    optional string version              = 16; //�ͻ��˰汾��
    optional vst_business_info businfo  = 17; //�ÿ�ҵ��������Ϣ
    optional terminal_info terminfo     = 18; //�ն���Ϣ
    optional string reserved             = 19; //json����͸����web��Ȩ����
    optional string publicip				= 20; //����ip
}

message login_ack {
    required fixed32 result     = 1; //���ؽ�������0��ʾʧ��
    required cg.User user = 2;
    required fixed32 eid        = 3; //��ҵid
    required string nickname     = 4; //�ǳ�

    optional string token        = 5; //��¼����
    optional string authfailinfo = 6; //json����web��Ȩ����ʧ�ܽ���
}

//�ǳ�
message logout {
    required cg.User user = 1;
    required fixed32 eid                = 2; //��ҵid
    required cg.Csr.Device device       = 3; //��¼�豸
    required sess.MsgBody.OprType role  = 4; //��¼��ɫ��0-�ͷ���1-�ÿ�

    optional fixed32 servicetype        = 5; //��������, 0-���ģ�1-��վ��2-������
    optional string token                = 6; //��¼����
    repeated string mac                  = 7; //��¼mac��ַ�б�
    repeated string ip                   = 8; //��¼ip��ַ�б�
    optional string publicip				= 9; //����ip
}

message logout_ack {
    required fixed32 result     = 1; //���ؽ�������0��ʾʧ��
    required cg.User user = 2;
    required fixed32 eid        = 4; //��ҵid

    optional string webfailinfo	= 5; //json����web�ǳ�����
}

//���Ӻ���
message agt_addfriend {
    required cg.User user = 1;
    required fixed32 eid      = 2; //��ҵid
    required cg.User friend = 3;
}

message agt_addfriend_ack {
    required fixed32 result   = 1; //���ؽ���
    required cg.User user = 2;
    required cg.User friend = 3;
}

//ɾ������
message agt_delfriend {
    required cg.User user = 1;
    required fixed32 eid      = 2; //��ҵid
    required cg.User friend = 3;
}
message agt_delfriend_ack {
    required fixed32 result   = 1; //���ؽ���
    required cg.User user = 2;
    required cg.User friend = 3;
}

//��ȡ����
message agt_getfriend {
    required cg.User user = 1;
    required fixed32 eid    = 2; //��ҵid
}

message agt_getfriend_ack {
    message friend_node
    {
        required cg.User friend = 1;
        required string   nickname     = 2; //�ǳ�
        required fixed32 eid          = 3; //��ҵid
        required string   groupid      = 4; //��id
        required cg.Csr.Status status = 5; //����״̬
    }
    required fixed32     result     = 1; //���ؽ���
    repeated friend_node friendlist = 2; //�û���Ϣ
}

//��ȡ�ÿ��б�
message agt_getvst {
    required cg.User user = 1;
    required fixed32 eid = 2; //��ҵid
    optional string token = 3; //��¼����
}

message agt_getvst_ack {
    message vst_node {
        required cg.User user = 1; //�ÿ�
        required fixed32  siteid          = 2; //����վ��id
        required cg.Visitor.Device device = 3; //�ÿ͵�¼�豸
        required cg.Visitor.Status status = 4; //�ÿ�״̬
        required sfixed32 reason          = 5; //״̬ԭ����
        required fixed64  entertime       = 6; //��վʱ��
        required fixed32  enterip         = 7; //��վIP
    }

    required fixed32  result  = 1; //���ؽ���
    repeated vst_node vstlist = 2; //�û���Ϣ
}

//��ϯ����״̬
message agt_changestat {
    required cg.User user = 1;
    required fixed32 eid          = 2; //��ҵid
    required cg.Csr.Device device = 3; //��¼�豸
    required cg.Csr.Status status = 4; //�ı���״̬
    optional string token = 5; //��¼����
}

message agt_changestat_ack {
    required fixed32 result       = 1; //���ؽ���
    required cg.User user = 2;
    required cg.Csr.Status status = 3; //�ı�֮ǰ��״̬
}

//�ÿͱ���״̬
message vst_changestat {
    required cg.User user                = 1;
    required fixed32 eid                 = 2; //��ҵid
    required cg.Visitor.Device device    = 3; //��¼�豸
    required cg.Visitor.Status status    = 4; //�ı�����״̬
    optional cg.Visitor.Status lststatus = 5; //�ı�ǰ��״̬
    optional fixed32 siteid              = 6; //�ÿͷ��ʵ�siteid
	repeated cg.User toids               = 7; //Ĭ��֪ͨ�б�
	optional string sessionid        = 8; //sessionid
	optional string info       = 9; //json��,������Ҫ֪ͨ����Ϣ,�ͻ��˽���

}

//����
message agt_heartbeat {
    required cg.User user = 1;
    required fixed32 eid          = 2; //��ҵid
    required cg.Csr.Device device = 3; //��¼�豸

    optional string token        = 4; //��¼����
}

message agt_heartbeat_ack {
    required fixed32 result = 1; //���ؽ���
    required cg.User user = 2;
}

//֪ͨ�ͷ�״̬�仯
message notify_agt_stat {
    required cg.User user = 1;
    required fixed32 eid          = 2; //��ҵid
    required string   nickname     = 3; //�ͷ��ǳ�
    required cg.Csr.Device device = 4; //��¼�豸
    required cg.Csr.Status status = 5; //�ͷ�����
}

//������
message notify_kickout {
    required cg.User user   = 1; //���ߵ���ϯ
    required fixed32 reason = 2; //�߳�ԭ��
}

//��ȡ��ͨ�б�
message agt_getcomlist {
    required cg.User user  = 1; //�ͷ�
    required fixed32 eid   = 2; //��ҵid
    optional string   token = 3; //��¼����
}

//��ȡ��ͨ�б��ظ�
message agt_getcomlist_ack {
    message vst_node {
        required cg.User user             = 1;
        required string   nickname         = 2;
        required fixed32 eid              = 3;
        required cg.Visitor.Device device = 4;
        optional string   info             = 5;
        optional fixed32 siteid           = 6;
    }

    message csr_node {
        required cg.User user         = 1;
        required string   nickname     = 2;
        required fixed32 eid          = 3;
        required cg.Csr.Device device = 4;
    }

    required fixed32  result    = 1; //���ؽ���
    optional string    reason    = 2; //������Ϣ
    required cg.User  user      = 3;
    required string    groupid   = 4; //������id
    required string    groupname = 5; //����������
    repeated vst_node visitors  = 6; //�ÿ��б�
    repeated csr_node csrs      = 7; //ͬ������
    optional string    token     = 8; //��¼����
}

//��ȡ״̬�ӿ�
message agt_getcomstat {
    message vst_node {
        required cg.User user             = 1;
        required fixed32 eid              = 2;
        required cg.Visitor.Device device = 3;
        optional fixed32 siteid           = 4;
    }

    message csr_node {
        required cg.User user         = 1;
        required fixed32 eid          = 2;
        required cg.Csr.Device device = 3;
    }

    required cg.User  user     = 1;
    required fixed32  eid      = 2;
    repeated vst_node visitors = 3; //�ÿ��б�
    repeated csr_node csrs     = 4; //ͬ������
    optional string    token    = 5; //��¼����
}

//��ȡ״̬�ӿڻظ�
message agt_getcomstat_ack {
    message vst_node {
        required cg.User user             = 1;
        optional cg.Visitor.Device device = 2;
        required cg.Visitor.Status stat   = 3;
        optional fixed64 timestamp        = 4;
        optional string   sessionid        = 5;
        optional string   info             = 6;
        optional fixed32 siteid           = 7;
    }

    message csr_node {
        required cg.User user         = 1;
        required cg.Csr.Device device = 2;
        required cg.Csr.Status stat   = 3;
        repeated string   sessionid    = 4;
    }

    required fixed32  result   = 1;
    optional string    reason   = 2; //������Ϣ
    required cg.User  user     = 3;
    repeated vst_node visitors = 4; //�ÿ��б�
    repeated csr_node csrs     = 5; //ͬ������
    optional string    token    = 6; //��¼����
}
