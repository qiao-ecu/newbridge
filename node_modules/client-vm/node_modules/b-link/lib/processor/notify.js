/**
 * @file 通知消息处理
 * @author cxl(chenxinle@baidu.com)
 */

var CONST = require('../const');

var handlers = {};

/**
 * 访客状态变更通知
 *
 * @param {Object} msg 消息对象
 */
handlers[CONST.CMD.NTF_VSTAT] = function (msg) {
    var data = msg.body;
    var id = data.user.id;
    var contacts = {
        id: id,
        authType: data.user.authtype,
        eid: data.eid,
        device: data.device,
        siteId: data.siteid,
        type : CONST.ROLE.VIS,
        status: data.status
    };

    if (data.sessionid) {
        contacts.sessionId = data.sessionid;
    }

    // 处理内部访问者数据结构
    if (this._searchContacts(id).node) {
        contacts = this._updateContacts(id, contacts);
    } else {
        this._addContacts(contacts);
    }
    
    var visitorInfo = JSON.parse(data.visitor_info) || {
        peers: []
    };
    var user = this.getUserInfo();
    // 状态通知上层（Maybe在CONST中直接mapping事件和状态更好些，TODO后续优化）
    if (contacts.status == CONST.V_STATUS.ENTER) {
        if (contacts.sessionId) {
            // 非常Dirty的solution，blink为什么要这么设计。。。。
            if (visitorInfo.reason === 'talk to other') {
                var match = false;
                visitorInfo.peers.forEach(function(peer) {
                    if (peer.uid == user.id) {
                        // 自己发起邀请后，自己点了咨询图标的情况
                        match = true;
                        return;
                    }
                });
                if (!match) {
                    this.emit('backtoenter', contacts);
                }
            } else {
                this.emit('backtoenter', contacts);
            }
        } else {
            this.emit('enter', contacts);
        }
    }
    else if (contacts.status == CONST.V_STATUS.QUEUEING) {
        this.emit('queue', contacts);
    }
    else if (contacts.status == CONST.V_STATUS.LEAVE) {
        // 移除列表
        this._removeContacts(id);
        this.emit('leave', contacts);
    }
    else if (contacts.status == CONST.V_STATUS.ALERTING) {
        // this.emit('invite', contacts);
        var fromUserId = visitorInfo.from ? visitorInfo.from.id : null;
        if (user.id == fromUserId) {
            // Means self notify. Ignore
            this.logger.info('Ignore recv invite notify of %s', JSON.stringify(data));
        } else {
            this.emit('lock', contacts);
        }
    }
    else if (contacts.status == CONST.V_STATUS.TALKING) {
        // this.emit('chat', contacts);
        if (visitorInfo.reason === 'vstwtr:f') {
            var matchTalk = false;
            visitorInfo.peers.forEach(function(peer) {
                if (peer.uid == user.id) {
                    // 自己发起邀请后，自己点了咨询图标的情况
                    matchTalk = true;
                    return;
                }
            });
            if (!matchTalk) {
                this.emit('chat', contacts);
            }
        }
        var toUserId = visitorInfo.to ? visitorInfo.to.id : null;
        var fromUid = visitorInfo.from ? visitorInfo.from.id : null;
        if (user.id == toUserId || user.id == fromUid) {
            // Means self notify. Ignore
            this.logger.info('Ignore recv chat notify of %s', JSON.stringify(data));
        } else {
            this.emit('lock', contacts);
        }
    }
    else {
        this.emit('update', contacts);
    }
};

/**
 * 客服被踢下线
 *
 * @param {Object} msg 消息对象
 */
handlers[CONST.CMD.NTF_KICKOUT] = function (msg) {
    var data = msg.body;
    var id = data.user.id;
    var user = this.getUserInfo();
    if (user.id == id) {
        this._status = CONST.STATUS.KICKOUT;
        user.status = CONST.STATUS.KICKOUT;
        this.emit('kickout', user);
    } else {
        this.logger.info('Ignore recv kickout notify of %s', JSON.stringify(data));
    }
};

/**
 * 客服状态变更通知
 *
 * @param {Object} msg 消息对象
 */
handlers[CONST.CMD.NTF_CSTAT] = function (msg) {
    var data = msg.body;
    var id = (data.user || {}).id;
    var user = this.getUserInfo();
    if (user.id == id) {
        this._status = data.status;
        user.status = data.status;
        this.emit('kickout', user);
    } else {
        this.logger.info('Ignore recv agt_status notify of %s', JSON.stringify(data));
    }
};

exports.type = CONST.MSG.NOTIFY;

exports.handlers = handlers;
