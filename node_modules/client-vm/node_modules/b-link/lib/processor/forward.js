/**
 * @file 广播消息处理
 * @author cxl(chenxinle@baidu.com)
 * @author mengran(mengran@baidu.com)
 */

var CONST = require('../const');

var handlers = {}; 

var chatHandler = function (msg) {
    var data = msg.body;
    var from = data.from;

    var contacts = {
        id: from.id,
        type: data.type,
        authType: from.authtype,
        sessionId: data.sessionid,
        siteId: data.siteid,
        status: CONST.V_STATUS.TALKING
    };

    if (this._searchContacts(contacts.id).node) {
        contacts = this._updateContacts(contacts.id, 
            {sessionId: contacts.sessionId, status: contacts.status});
    }
    else {
        this._addContacts(contacts);
        this.emit('enter', contacts);
    }

    this.emit('chat', contacts);
};


/**
 * 访客咨询框沟通通知
 *
 * @param {Object} msg 消息对象
 */
handlers[CONST.CMD.INVITE] = function(msg) {
    
    var _this = this;
    chatHandler.bind(_this)(msg);
};

/**
 * 访客邀请框沟通通知
 *
 * @param {Object} msg 消息对象
 */
handlers[CONST.CMD.ACCEPT] = function(msg) {
    
    var _this = this;
    chatHandler.bind(_this)(msg);
};

/**
 * 访客主动离开通知
 *
 * @param {Object} msg 消息对象
 */
handlers[CONST.CMD.BYE] = function (msg) {
    var data = msg.body;
    var id = data.from.id;
    var sessionid = data.sessionid;

    this.emit('chatover', {
        id: id,
        sessionId: sessionid
    });
};

/**
 * 消息到达通知
 *
 * @param {Object} msg 消息对象
 */
handlers[CONST.CMD.CONTENT] = function (msg) {
    var data = msg.body;
    var id = data.from.id;

    if (this._searchContacts(id).node) {
        this.emit('message', id, msg);
    }
    else {
        this.logger.warn('unkonw message source', msg);
    }
};

/**
 * 访客进站通知
 * NTF_VSTAT 也会通知访客进站且收到两个响应的先后顺序不确定
 * 两者都进行了部分相同的访客进站处理 修改进站逻辑时需要注意
 * see processor/notify.js
 * 
 * VST_ENTER这个通知在BLINK协议设计上是为了做访客实时轨迹用，
 * 和NTF_VSTAT的区别如下：
 * 访客A当且仅当［初始］进入站点S，会收到NTF_VSTAT，之后访客A
 * 在站点S上每浏览一个新页面，均会收到VST_ENTER、VST_LEAVE包。
 *
 * @param {Object} msg 消息对象
 */
handlers[CONST.CMD.VST_ENTER] = function (msg) {
    var data = msg.body;
    var id = data.user.id;
    var contacts = {
        id: id,
        authType: data.user.authtype,
        device: data.device,
        siteId: data.siteid,
        eid: data.eid,
        url: data.url
        // status: CONST.V_STATUS.ENTER
    };

    if (this._searchContacts(id).node) {
        this._updateContacts(id, contacts);
    }
    this.emit('pageenter', contacts);
};

/**
 * 访客离开通知
 * 
 * 由于浏览器等各种影响原因，这个事件和VST_ENTER事件并不严格能够一一匹配
 */
handlers[CONST.CMD.VST_LEAVE] = function (msg) {
    var data = msg.body;
    var id = data.user.id;
    this.emit('pageleave', id);
};

exports.type = CONST.MSG.FORWARD;

exports.handlers = handlers;
