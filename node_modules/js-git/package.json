{
  "name": "js-git",
  "version": "0.7.6",
  "description": "Git Implemented in JavaScript",
  "keywords": [
    "git",
    "js-git"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/creationix/js-git.git"
  },
  "author": {
    "name": "Tim Caswell",
    "email": "tim@creationix.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/creationix/js-git/issues"
  },
  "scripts": {
    "test": "ls test/test-* | xargs -n1 node"
  },
  "dependencies": {
    "bodec": "^0.1.0",
    "culvert": "^0.1.2",
    "git-sha1": "^0.1.2",
    "pako": "^0.2.5",
    "pathjoin": "git://github.com/creationix/pathjoin.git"
  },
  "gitHead": "e9bad7c481c352707217165d76c95f802748d989",
  "readme": "# JS-Git\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/creationix/js-git?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThis project is a collection of modules that helps in implementing git powered\napplications in JavaScript.  The original purpose for this is to enable better\ndeveloper tools for authoring code in restricted environments like ChromeBooks\nand tablets.  It also enables using git as a database to replace SQL and no-SQL\ndata stores in many applications.\n\nThis project was initially funded by two crowd-sourced fundraisers.  See details\nin [BACKERS.md](BACKERS.md) and [BACKERS-2.md](BACKERS-2.md).  Thanks to all of\nyou who made this possible!\n\n## Usage\n\nDetailed API docs are contained in the [doc](doc) subfolder of this repository.\n\nIn general the way you use js-git is you create a JS object and then mixin the\nfunctionality you need.  Here is an example of creating an in-memory database,\ncreating some objects, and then walking that tree using the high-level walker\nAPIs.\n\n## Creating a repo object.\n\n```js\n// This provides symbolic names for the octal modes used by git trees.\nvar modes = require('js-git/lib/modes');\n\n// Create a repo by creating a plain object.\nvar repo = {};\n\n// This provides an in-memory storage backend that provides the following APIs:\n// - saveAs(type, value) => hash\n// - loadAs(type, hash) => hash\n// - saveRaw(hash, binary) =>\n// - loadRaw(hash) => binary\nrequire('js-git/mixins/mem-db')(repo);\n\n// This adds a high-level API for creating multiple git objects by path.\n// - createTree(entries) => hash\nrequire('js-git/mixins/create-tree')(repo);\n\n// This provides extra methods for dealing with packfile streams.\n// It depends on\n// - unpack(packStream, opts) => hashes\n// - pack(hashes, opts) => packStream\nrequire('js-git/mixins/pack-ops')(repo);\n\n// This adds in walker algorithms for quickly walking history or a tree.\n// - logWalk(ref|hash) => stream<commit>\n// - treeWalk(hash) => stream<object>\nrequire('js-git/mixins/walkers')(repo);\n\n// This combines parallel requests for the same resource for effeciency under load.\nrequire('js-git/mixins/read-combiner')(repo);\n\n// This makes the object interface less strict.  See it's docs for details\nrequire('js-git/mixins/formats')(repo);\n```\n\n## Generators vs Callbacks\n\nThere are two control-flow styles that you can use to consume js-git APIs.  All\nthe examples here use `yield` style and assume the code is contained within a\ngenerator function that's yielding to a tool like [gen-run](https://github.com/creationix/gen-run).\n\nThis style requires ES6 generators.  This feature is currently in stable Firefox,\nin stable Chrome behind a user-configurable flag, in node.js 0.11.x or greater\nwith a command-line flag.\n\nAlso you can use generators on any ES5 platform if you use a source transform\nlike Facebook's [regenerator](http://facebook.github.io/regenerator/) tool.\n\nYou read more about how generators work at [Generators vs Fibers](http://howtonode.org/generators-vs-fibers).\n\n```js\nvar run = require('gen-run');\n\nrun(function*() {\n // Blocking logic goes here.  You can use yield\n var result = yield someAction(withArgs);\n // The generator pauses at yield and resumes when the data is available.\n // The rest of your process is not blocked, just this generator body.\n // If there was an error, it will throw into this generator.\n});\n```\n\nIf you can't use this new feature or just plain prefer node-style callbacks, all\njs-git APIs also support that.  The way this works is actually quite simple.\nIf you don't pass in the callback, the function will return a partially applied\nversion of your call expecting just the callback.\n\n```js\nsomeAction(withArgs, function (err, value) {\n  if (err) return handleMyError(err);\n  // do something with value\n});\n\n// The function would be implemented to support both style like this.\nfunction someAction(arg, callback) {\n  if (!callback) return someAction.bind(this, arg);\n  // We now have callback and arg\n}\n```\n\n## Basic Object Creation\n\nNow we have an in-memory git repo useful for testing the network operations or\njust getting to know the available APIs.\n\nIn this example, we'll create a blob, create a tree containing that blob, create\na commit containing that tree.  This shows how to create git objects manually.\n\n```js\n  // First we create a blob from a string.  The `formats` mixin allows us to\n  // use a string directly instead of having to pass in a binary buffer.\n  var blobHash = yield repo.saveAs(\"blob\", \"Hello World\\n\");\n\n  // Now we create a tree that is a folder containing the blob as `greeting.txt`\n  var treeHash = yield repo.saveAs(\"tree\", {\n    \"greeting.txt\": { mode: modes.file, hash: blobHash }\n  });\n\n  // With that tree, we can create a commit.\n  // Again the `formats` mixin allows us to omit details like committer, date,\n  // and parents.  It assumes sane defaults for these.\n  var commitHash = yield repo.saveAs(\"commit\", {\n    author: {\n      name: \"Tim Caswell\",\n      email: \"tim@creationix.com\"\n    },\n    tree: treeHash,\n    message: \"Test commit\\n\"\n  });\n\n```\n\n## Basic Object Loading\n\nWe can read objects back one at a time using `loadAs`.\n\n```js\n// Reading the file \"greeting.txt\" from a commit.\n\n// We first read the commit.\nvar commit = yield repo.loadAs(\"commit\", commitHash);\n// We then read the tree using `commit.tree`.\nvar tree = yield repo.loadAs(\"tree\", commit.tree);\n// We then read the file using the entry hash in the tree.\nvar file = yield repo.loadAs(\"blob\", tree[\"greeting.txt\"].hash);\n// file is now a binary buffer.\n```\n\nWhen using the `formats` mixin there are two new types for `loadAs`, they are\n`\"text\"` and `\"array\"`.\n\n```js\n// When you're sure the file contains unicode text, you can load it as text directly.\nvar fileAsText = yield repo.loadAs(\"text\", blobHash);\n\n// Also if you prefer array format, you can load a directory as an array.\nvar entries = yield repo.loadAs(\"array\", treeHash);\nentries.forEach(function (entry) {\n  // entry contains {name, mode, hash}\n});\n```\n\n## Using Walkers\n\nNow that we have a repo with some minimal data in it, we can query it.  Since we\nincluded the `walkers` mixin, we can walk the history as a linear stream or walk\nthe file tree as a depth-first linear stream.\n\n```js\n// Create a log stream starting at the commit we just made.\n// You could also use symbolic refs like `refs/heads/master` for repos that\n// support them.\nvar logStream = yield repo.logWalk(commitHash);\n\n// Looping through the stream is easy by repeatedly calling waiting on `read`.\nvar commit, object;\nwhile (commit = yield logStream.read(), commit !== undefined) {\n\n  console.log(commit);\n\n  // We can also loop through all the files of each commit version.\n  var treeStream = yield repo.treeWalk(commit.tree);\n  while (object = yield treeStream.read(), object !== undefined) {\n    console.log(object);\n  }\n\n}\n```\n\n## Filesystem Style Interface\n\nIf you feel that creating a blob, then creating a tree, then creating the parent\ntree, etc is a lot of work to save just one file, I agree.  While writing the\ntedit app, I discovered a nice high-level abstraction that you can mixin to make\nthis much easier.  This is the `create-tree` mixin referenced in the above\nconfig.\n\n```js\n// We wish to create a tree that contains `www/index.html` and `README.me` files.\n// This will create these two blobs, create a tree for `www` and then create a\n// tree for the root containing `README.md` and the newly created `www` tree.\nvar treeHash = yield repo.createTree({\n  \"www/index.html\": {\n    mode: modes.file,\n    content: \"<h1>Hello</h1>\\n<p>This is an HTML page?</p>\\n\"\n  },\n  \"README.md\": {\n    mode: modes.file,\n    content: \"# Sample repo\\n\\nThis is a sample\\n\"\n  }\n});\n```\n\nThis is great for creating several files at once, but it can also be used to\nedit existing trees by adding new files, changing existing files, or deleting\nexisting entries.\n\n```js\nvar changes = [\n  {\n    path: \"www/index.html\" // Leaving out mode means to delete the entry.\n  },\n  {\n    path: \"www/app.js\", // Create a new file in the existing directory.\n    mode: modes.file,\n    content: \"// this is a js file\\n\"\n  }\n];\n\n// We need to use array form and specify the base tree hash as `base`.\nchanges.base = treeHash;\n\ntreeHash = yield repo.createTree(changes);\n```\n\n## Creating Composite Filesystems\n\nThe real fun begins when you create composite filesystems using git submodules.\n\nThe code that handles this is not packaged as a repo mixin since it spans several\nindependent repos.  Instead look to the [git-tree](https://github.com/creationix/git-tree)\nrepo for the code.  It's interface is still slightly unstable and undocumented\nbut is used in production by tedit and my node hosting service that complements tedit.\n\nBasically this module allows you to perform high-level filesystem style commands\non a virtual filesystem that consists of many js-git repos.  Until there are\nproper docs, you can see how tedit uses it at <https://github.com/creationix/tedit-app/blob/master/src/data/fs.js#L11-L21>.\n\n## Mounting Github Repos\n\nI've been asking Github to enable CORS headers to their HTTPS git servers, but\nthey've refused to do it.  This means that a browser can never clone from github\nbecause the browser will disallow XHR requests to the domain.\n\nThey do, however, offer a REST interface to the raw [git data](https://developer.github.com/v3/git/).\n\nUsing this I wrote a mixin for js-git that uses github *as* the backend store.\n\nCode at <https://github.com/creationix/js-github>. Usage in tedit can be seen at\n<https://github.com/creationix/tedit-app/blob/master/src/data/fs.js#L31>.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/creationix/js-git#readme",
  "_id": "js-git@0.7.6",
  "_shasum": "2352b55fda9303a61f424ea64a1620a017b54fd4",
  "_from": "git+https://github.com/li-yinan/js-git.git",
  "_resolved": "git+https://github.com/li-yinan/js-git.git#e9bad7c481c352707217165d76c95f802748d989"
}
