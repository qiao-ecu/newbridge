define(function(require){var exports={},e={rootPath:".ecu"},t=window.require,n=require("jquery"),i=require("./git-fs"),r=(t("path"),t("mkdirp"),t("fs")),a=process.cwd(),o=t(a+"/package.json"),s=o.distRepo;t("js-git/lib/modes");return t("js-git/mixins/fs-db")(e,i),t("js-git/mixins/create-tree")(e),t("js-git/mixins/pack-ops")(e),t("js-git/mixins/read-combiner")(e),t("js-git/mixins/formats")(e),require("./walker")(e),exports.fetch=function(){var i=n.Deferred();if(!s)return i.reject("no distRepo"),i.promise();if(!r.existsSync(e.rootPath))return i.reject("no git info folder, please cp -r .git -> .ecu"),i.promise();var a=t("js-git/net/git-fetch-pack"),o=t("js-git/net/request-xhr"),l=t("js-git/net/transport-http")(o),u=l(s),d=a(u),c={};return d.take(function(t,n){if(t)throw t;for(var i in n)if(n.hasOwnProperty(i)&&/^refs/.test(i))c[i.replace("heads","remotes/origin")]=n[i],d.put({want:n[i]});d.put(null),e.readPackedRefs(function(e,t){for(var n in c)if(n in t)d.put({have:t[n]});d.put({done:!0})})}),d.take(function(t,n){if(t)throw t;e.unpack(n.pack,{onProgress:function(t){var n=/\((\d+)\/(\d+)\)/,r=n.exec(t);if(console.log(t),r[1]==r[2]-1)t="Receiving objects: 100% ("+r[2]+"/"+r[2]+")\r\n",console.log(t),e.updateRefs(c,function(){i.resolve(c)})},onError:function(e){console.log(e),i.reject(e)}},function(){i.resolve()})}),i.promise()},exports.checkout=function(t,i){var a=n.Deferred();if(!r.existsSync(e.rootPath))return a.reject("no git info folder, please cp -r .git -> .ecu"),a.promise();else return e.getBranch(function(n,r){t=t||"refs/heads/"+r,i=i||"refs/remotes/origin/"+r,console.log('checkout from "'+t+'" to "'+i+'"'),e.checkout(t,i).then(function(){a.resolve()})}),a.promise()},exports.getLastCommit=function(){var t=n.Deferred();return e.getBranch(function(n,i){var r="refs/remotes/origin/"+i;e.resolveHash(r).then(e.loadCommit).then(function(e){t.resolve(e)})}),t.promise()},exports});