describe("X.class Inherit Test",function(){var e={superSProp1:1,superSProp2:2,supersfn1:function(){return this.superSProp1},supersfn2:function(){return this.superSProp2},seach:function(e,t){for(var n=0;n<e.length;++n)t.call(e,e[n],n,e)},splus:function(){var e=0;return this.each(arguments,function(t){e+=t}),e}},t={sub1SProp1:1,sub1SProp2:2,sub1sfn1:function(){return this.splus(this.supersfn1()+this.sub1SProp1)},sub1sfn2:function(){return this.splus(this.supersfn2()+this.sub1SProp2)},sminus:function(){var e=0;return this.each(arguments,function(t){e-=t}),e}},n={sub2SProp1:1,sub2SProp2:2,sub2sfn1:function(){return this.splus(this.sub1sfn1()+this.sub2SProp1)},sub2sfn2:function(){return this.splus(this.sub1sfn2()+this.sub2SProp2)},smulti:function(){var e=1;return this.each(arguments,function(t){e*=t}),e}},r=X.Class.create({constructor:function(e,t){this.superProp1=e,this.superProp2=t},__statics:e,fn1:function(){return this.superProp1},fn2:function(){return this.superProp2},each:function(e,t){for(var n=0;n<e.length;++n)t.call(e,e[n],n,e)},plus:function(){var e=0;return this.each(arguments,function(t){e+=t}),e},toString:function(){return this.plus(this.fn1(),this.fn2())}}),o=X.Class(r,{constructor:function(e,t,n,r){this.$super(arguments),this.sub1Prop1=n,this.sub1Prop2=r},__statics:t,fn1:function(){return this.plus(this.$super(arguments)+this.sub1Prop1)},fn2:function(){return this.plus(this.$super(arguments)+this.sub1Prop2)},minus:function(){var e=0;return this.each(arguments,function(t){e-=t}),e}}),i=X.Class(o,{constructor:function(e,t,n,r,o,i){this.$super(arguments),this.sub2Prop1=o,this.sub2Prop2=i},__statics:n,fn1:function(){return this.plus(this.$super(arguments)+this.sub2Prop1)},fn2:function(){return this.plus(this.$super(arguments)+this.sub2Prop2)},multi:function(){var e=1;return this.each(arguments,function(t){e*=t}),e},toString:function(){return this.plus(this.fn1(),this.fn2())}}),s=new r(1,2),u=new o(1,2,3,4),a=new i(1,2,3,4,5,6);describe("One level inheritance test",function(){it("Sub1's $self is set",function(){expect(o.prototype.$self).to.equal(o)}),it("Sub1's __super is equal to Super",function(){expect(o.__super).to.equal(r)}),it("sub1's $super is called",function(){expect(u.superProp1).to.equal(1),expect(u.superProp2).to.equal(2)}),it("sub1's inherited methods from Super are set",function(){expect(u.each).to.equal(u.$self.__super.prototype.each),expect(u.each).to.equal(s.each),expect(u.plus).to.equal(u.$self.__super.prototype.plus),expect(u.plus).to.equal(s.plus)}),it("sub1's static properties are set",function(){for(var e in t)expect(o[e]).to.equal(t[e])}),it("sub1's inherited static properties are set",function(){for(var t in e)expect(o[t]).to.equal(e[t])}),it("sub1's own properties are set",function(){expect(u.sub1Prop1).to.equal(3),expect(u.sub1Prop2).to.equal(4)}),it("sub1's own methods are set",function(){expect(u.fn1).to.equal(o.prototype.fn1),expect(u.fn2).to.equal(o.prototype.fn2),expect(u.minus).to.equal(o.prototype.minus)}),it("Super constructor method is called",function(){expect(u.superProp1).to.equal(1),expect(u.superProp2).to.equal(2)})}),describe("Multiple level inheritance test",function(){it("Sub2's $self is set",function(){expect(i.prototype.$self).to.equal(i)}),it("Sub2's __super is equal to Super",function(){expect(i.__super).to.equal(o)}),it("sub2's $super is called",function(){expect(a.superProp1).to.equal(1),expect(a.superProp2).to.equal(2),expect(a.sub1Prop1).to.equal(3),expect(a.sub1Prop2).to.equal(4)}),it("sub2's inherited methods from Super are set",function(){expect(a.each).to.equal(a.$self.__super.__super.prototype.each),expect(a.each).to.equal(s.each)}),it("sub2's inherited methods from Sub1 are set",function(){expect(a.minus).to.equal(a.$self.__super.prototype.minus),expect(a.minus).to.equal(u.minus)}),it("sub2's static properties are set",function(){for(var e in n)expect(i[e]).to.equal(n[e])}),it("sub2's inherited static properties are set",function(){for(var n in e)expect(i[n]).to.equal(e[n]);for(var n in t)expect(i[n]).to.equal(t[n])}),it("sub2's own properties are set",function(){expect(a.sub2Prop1).to.equal(5),expect(a.sub2Prop2).to.equal(6)}),it("sub2's own methods are set",function(){expect(a.fn1).to.equal(i.prototype.fn1),expect(a.fn2).to.equal(i.prototype.fn2),expect(a.multi).to.equal(i.prototype.multi)}),it("sub2's $self is set",function(){expect(a.$self).to.equal(i)}),it("Super constructor method is called",function(){expect(a.superProp1).to.equal(1),expect(a.superProp2).to.equal(2)}),it("Sub1 constructor method is called",function(){expect(a.sub1Prop1).to.equal(3),expect(a.sub1Prop2).to.equal(4)})}),describe("Inherited $super call test",function(){it("Super's instance methods are called right",function(){expect(s.fn1()).to.equal(s.superProp1),expect(s.fn2()).to.equal(s.superProp2),expect(s.plus(s.fn1(),s.fn2())).to.equal(s.superProp1+s.superProp2)}),it("Sub1's instance methods are called right",function(){expect(u.fn1()).to.equal(u.superProp1+u.sub1Prop1),expect(u.fn2()).to.equal(u.superProp2+u.sub1Prop2),expect(u.plus(s.fn1(),s.fn2())).to.equal(s.fn1()+s.fn2()),expect(u.minus(s.fn1(),s.fn2())).to.equal(-s.fn1()-s.fn2())}),it("Sub2's instance methods are called right",function(){expect(a.fn1()).to.equal(u.fn1()+a.sub2Prop1),expect(a.fn2()).to.equal(u.fn2()+a.sub2Prop2),expect(a.plus(u.fn1(),u.fn2())).to.equal(u.fn1()+u.fn2()),expect(a.minus(u.fn1(),u.fn2())).to.equal(-u.fn1()-u.fn2()),expect(a.multi(u.fn1(),u.fn2())).to.equal(u.fn1()*u.fn2())})})});