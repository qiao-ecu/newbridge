define(function(require){function e(t){if(!(this instanceof e))return new e(t);else return void o.apply(this,arguments)}function t(n){if(!(this instanceof t))return new t(n);else return void e.apply(this,arguments)}function n(t){if(!(this instanceof n))return new n(t);else return void e.apply(this,arguments)}var i=require("./util"),o=require("./Functor").Functor,r=require("./Monad").Monad;return e.prototype.fmap=function(e){if(this instanceof t)return this;else if(this instanceof n){var i=this.getData(),o=e(i);return n(o)}throw"data is not a Either instance!"},i.inherit(e,o),e.prototype.mApply=function(i){if(this instanceof t)return this;else if(this instanceof n){var o=this.getData(),r=i(o);if(!(r instanceof e))throw"return is not a Either Monad";return r}throw"data is not a Either instance!"},i.inherit(e,r),i.inherit(t,e),i.inherit(n,e),{Either:e,Left:t,Right:n}});